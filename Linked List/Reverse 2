class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
     /* Appproach 1
     step 1 l to r reverse the linked list
     step 2 attach new head to previous pointer before l
     step 3 traverse the linked list till null and then attach the remaining list i.e. after r.
     
     Code 
         ListNode* reverse(ListNode* head){
        
        ListNode* prev = NULL, *next = NULL, *current = head;
        while(current != NULL){
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
            
        }
        
        return prev;
    }
    
  //         ListNode* current = head, *prev = NULL;
//         int count = 1;
//         while(count != left){
//             prev = current;
//             current = current->next;
//             count++;
//         }
        
//         ListNode* start = current;
//         while(count != right){
//             current = current->next;
//             count++;
//         }
        
//         ListNode* rest = current->next;
//         current->next = NULL;
        
//         ListNode* newHead = reverse(start);
//         if (prev!=NULL){
//             prev->next = newHead;

//         }
//         current = newHead;
//         while(current->next!=NULL){
//             current= current->next;
//         }
//         current->next = rest;
//         if(left == 1){
//             return newHead;
//         }
//         else{
//             return head;
//         }
        */
    // Approach 2
        if(head == NULL || left == right){
            return head;
        }
        ListNode* prev, *tail , *temp = NULL;
        ListNode *dummy = new ListNode(0);
        prev = dummy;
        dummy->next = head ;
        for(int i = 0 ; i<left-1 ; i++){
            prev=prev->next;
        }
        tail = prev->next;
        for(int i = 0 ; i<right-left ; i++){
            temp = prev->next ;
            prev->next = tail->next;
            tail->next = tail->next->next ;
            prev->next->next = temp;
        }
        
        return dummy->next ;
        
    }
};
